package urbosenti.application;

import java.io.File;
import java.io.IOException;

import urbosenti.application.resources.ConcreteApplicationHandler;
import android.app.Service;
import android.content.Intent;
import android.os.IBinder;
import android.util.Log;

public class SensingApplicationService extends Service {

	//private DeviceManager deviceManager;
	private ConcreteApplicationHandler applicationHandler;
	
	@Override
	public IBinder onBind(Intent intent) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void onCreate() {/*
		// The service is being created
		// It declares new instances to run when the command onStartCommnand is activated
		// Instanciate the main component: DeviceManager();
        deviceManager = new DeviceManager();
        deviceManager.enableAdaptationComponent(); // ebable the adaptation componente
        // add the output communication interfaces
        deviceManager.addSupportedCommunicationInterface(new WiredCommunicationInterface());
        // add the ApplicationHandler to handle application events generated by the Sensing Module
        applicationHandler = new ConcreteApplicationHandler(deviceManager);
        deviceManager.getEventManager().subscribe(applicationHandler);
        // Instantiate the service to receive messages
        deviceManager.addSupportedInputCommunicationInterface(
        		new SocketPushServiceReceiver(deviceManager.getCommunicationManager()));
        // set the Android operating system discovery
        //deviceManager.setOSDiscovery(new AndroidOperationalSystemDiscovery(getBaseContext()));
        // assign the script that contains all initial data for the discovery process
        deviceManager.setDeviceKnowledgeRepresentationModel(new File("deviceKnowledgeModel.xml"),"xmlFile");
        // execute the onCreate process from the middleware
        deviceManager.onCreate();*/
	}

	@Override
	public int onStartCommand(Intent intent, int flags, int startId) {
		// start all internal services/threads 
		/*	if(deviceManager.isRunning()){ 
	        try {
	        	deviceManager.startUrboSentiServices();
			} catch (IOException e) {
				Log.d("Error Service", "Error when starting the service.");
				throw new Error("Error when starting the service.");
			}
		} */
        /**** sensing application start here ****/
		
		return START_REDELIVER_INTENT;
	}

	@Override
	public void onDestroy() {
		// stop all service's threads
		// deviceManager.stopUrboSentiServices();
	}

}
